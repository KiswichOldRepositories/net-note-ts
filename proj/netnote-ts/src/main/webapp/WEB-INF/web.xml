<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID" version="2.5">

    <display-name>net-note</display-name>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:config/applicationContext.xml</param-value>
    </context-param>

    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>net-note.rest</param-value>
    </context-param>
    <!--自定义由Spring载入的Log4j配置文件位置-->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:/config/log4j.properties</param-value>
    </context-param>

    <!-- Web 项目 系统变量注入 -->
    <listener>
        <listener-class>cn.com.scooper.common.spring.config.PrepareConfigPathListener</listener-class>
    </listener>

    <!-- Web 项目 Spring 加载 Log4j 的监听 -->
    <listener id="log4jConfigListener">
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 浏览器不支持put,delete等method,由该filter将/blog?_method=delete转换为标准的http delete方法 -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <!--<filter>-->
        <!--<filter-name>HiddenHttpMethodFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>-->
    <!--</filter>-->

    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <servlet-name>springmvc</servlet-name>
        <!--<url-pattern>/*</url-pattern>-->
    </filter-mapping>

    <!--<filter>-->
        <!--<filter-name>httpPutFormcontentFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>httpPutFormcontentFilter</filter-name>-->
        <!--&lt;!&ndash;<url-pattern>/*</url-pattern>&ndash;&gt;-->
        <!--<servlet-name>springmvc</servlet-name>-->
    <!--</filter-mapping>-->

    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--可以不配置.默认所对应的配置文件是WEB-INF下的{servlet-name}-servlet.xml，这里便是：spring-servlet.xml
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:/config/spring-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>


    <!--
            这里可以用 / 但不能用 /*，拦截了所有请求会导致静态资源无法访问，所以要在spring-servlet.xml中配置mvc:resources
        -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!--&lt;!&ndash;提供PUT表单传参支持&ndash;&gt;-->
    <!--<filter>-->
        <!--<filter-name>httpPutFormContentFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>httpPutFormContentFilter</filter-name>-->
        <!--&lt;!&ndash;<url-pattern>/*</url-pattern>&ndash;&gt;-->
        <!--<servlet-name>springmvc</servlet-name>-->
    <!--</filter-mapping>-->



    <!-- 设置编码  -->
    <filter>
        <filter-name>Set Character Encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value><!-- 强制进行转码 -->
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>Set Character Encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>




    <!-- 对 /data/* 支持JSONP跨域 -->
    <filter>
        <filter-name>JSONPFilter</filter-name>
        <filter-class>cn.com.scooper.common.filters.JSONPFilter</filter-class>
        <!-- 启用JSONP的参数名 -->
        <init-param>
            <param-name>callbackKey</param-name>
            <param-value>jsonpcb</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>JSONPFilter</filter-name>
        <url-pattern>/data/*</url-pattern>
    </filter-mapping>

    <!-- 对 /data/* 提供CORS跨域支持 -->
    <filter>
        <filter-name>XDomainFilter</filter-name>
        <filter-class>cn.com.scooper.common.filters.XDomainFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>XDomainFilter</filter-name>
        <url-pattern>/data/*</url-pattern>
    </filter-mapping>

    <!-- 默认页面 -->
    <welcome-file-list>
        <welcome-file>editors.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>

    <!--session 过期时间  -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>


</web-app>
